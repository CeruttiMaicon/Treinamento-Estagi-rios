import{_ as s,M as d,p as l,q as t,R as a,t as e,N as i,a1 as r}from"./framework-5866ffd3.js";const n={},u=r('<h1 id="algoritmos" tabindex="-1"><a class="header-anchor" href="#algoritmos" aria-hidden="true">#</a> Algoritmos</h1><p>Neste módulo, os estagiários aprenderão sobre algoritmos e resolverão problemas comuns usando diferentes estruturas de dados e técnicas de programação.</p><h2 id="aulas" tabindex="-1"><a class="header-anchor" href="#aulas" aria-hidden="true">#</a> Aulas</h2><h3 id="aula-curso-em-video" tabindex="-1"><a class="header-anchor" href="#aula-curso-em-video" aria-hidden="true">#</a> Aula Curso em Vídeo</h3>',4),c={href:"https://www.youtube.com/playlist?list=PLHz_AreHm4dmSj0MHol_aoNYCSGFqvfXV",target:"_blank",rel:"noopener noreferrer"},m=a("h3",{id:"aula-dev-aprender",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#aula-dev-aprender","aria-hidden":"true"},"#"),e(" Aula Dev Aprender")],-1),p={href:"https://www.youtube.com/watch?v=iF2MdbrTiBM",target:"_blank",rel:"noopener noreferrer"},h=r('<h1 id="desafios" tabindex="-1"><a class="header-anchor" href="#desafios" aria-hidden="true">#</a> Desafios</h1><h2 id="desafio-1-media-de-notas" tabindex="-1"><a class="header-anchor" href="#desafio-1-media-de-notas" aria-hidden="true">#</a> Desafio 1: Média de notas</h2><p><strong>Objetivo</strong>: Desenvolver um programa que receba as notas de alunos e calcule a média das notas.</p><h3 id="requisitos" tabindex="-1"><a class="header-anchor" href="#requisitos" aria-hidden="true">#</a> Requisitos:</h3><ol><li>O programa deve solicitar ao usuário o número de alunos.</li><li>Para cada aluno, o programa deve solicitar as notas de três provas.</li><li>Após receber todas as notas, o programa deve calcular a média de cada aluno.</li><li>O programa deve exibir a média de cada aluno na tela, juntamente com uma mensagem informando se o aluno foi aprovado ou reprovado (considerando a média mínima para aprovação como 6.0).</li><li>Ao final, o programa deve mostrar a média geral da turma.</li></ol><h3 id="dicas" tabindex="-1"><a class="header-anchor" href="#dicas" aria-hidden="true">#</a> Dicas:</h3><ul><li>Utilize funções para organizar e simplificar seu código.</li><li>Considere utilizar loops para solicitar as notas dos alunos e calcular as médias.</li><li>Preste atenção na formatação e na legibilidade do código para torná-lo fácil de entender e manter.</li></ul><p>Este desafio ajudará o estagiário a praticar a lógica de programação, o uso de funções, loops e estruturas condicionais, além de melhorar suas habilidades com operações matemáticas básicas.</p><h2 id="desafio-2-maior-e-menor-numero" tabindex="-1"><a class="header-anchor" href="#desafio-2-maior-e-menor-numero" aria-hidden="true">#</a> Desafio 2: Maior e menor número</h2><p><strong>Objetivo</strong>: Desenvolver um programa que encontre o maior e o menor número em uma lista de números.</p><h3 id="requisitos-1" tabindex="-1"><a class="header-anchor" href="#requisitos-1" aria-hidden="true">#</a> Requisitos:</h3><ol><li>O programa deve solicitar ao usuário quantos números serão inseridos na lista.</li><li>Para cada número, o programa deve solicitar ao usuário que digite o valor.</li><li>Após receber todos os números, o programa deve identificar o maior e o menor número da lista.</li><li>O programa deve exibir o maior e o menor número na tela, juntamente com suas posições na lista.</li></ol><h3 id="dicas-1" tabindex="-1"><a class="header-anchor" href="#dicas-1" aria-hidden="true">#</a> Dicas:</h3><ul><li>Utilize funções para organizar e simplificar seu código.</li><li>Considere utilizar loops para receber os números e encontrar o maior e o menor valor.</li><li>Preste atenção na formatação e na legibilidade do código para torná-lo fácil de entender e manter.</li></ul><p>Este desafio ajudará o estagiário a praticar a lógica de programação, o uso de funções, loops e estruturas condicionais, além de melhorar suas habilidades com operações em listas e comparação de valores.</p><h2 id="desafio-3-fatorial" tabindex="-1"><a class="header-anchor" href="#desafio-3-fatorial" aria-hidden="true">#</a> Desafio 3: Fatorial</h2><p><strong>Objetivo</strong>: Desenvolver um algoritmo que calcule o fatorial de um número.</p><h3 id="requisitos-2" tabindex="-1"><a class="header-anchor" href="#requisitos-2" aria-hidden="true">#</a> Requisitos:</h3><ol><li>O programa deve solicitar ao usuário que digite um número inteiro positivo.</li><li>O algoritmo deve calcular o fatorial do número fornecido pelo usuário.</li><li>O programa deve exibir o resultado do fatorial na tela.</li></ol><h3 id="dicas-2" tabindex="-1"><a class="header-anchor" href="#dicas-2" aria-hidden="true">#</a> Dicas:</h3><ul><li>Utilize funções para organizar e simplificar seu código.</li><li>Considere utilizar loops ou recursão para calcular o fatorial.</li><li>Preste atenção na formatação e na legibilidade do código para torná-lo fácil de entender e manter.</li><li>Valide a entrada do usuário para garantir que apenas números inteiros positivos sejam aceitos.</li></ul><p>Este desafio ajudará o estagiário a praticar a lógica de programação, o uso de funções, loops e estruturas condicionais, além de melhorar suas habilidades com operações matemáticas e recursão.</p><h2 id="desafio-4-numeros-primos" tabindex="-1"><a class="header-anchor" href="#desafio-4-numeros-primos" aria-hidden="true">#</a> Desafio 4: Números primos</h2><p><strong>Objetivo</strong>: Escrever um programa que verifique se um número é primo.</p><h3 id="requisitos-3" tabindex="-1"><a class="header-anchor" href="#requisitos-3" aria-hidden="true">#</a> Requisitos:</h3><ol><li>O programa deve solicitar ao usuário que digite um número inteiro positivo.</li><li>O algoritmo deve verificar se o número fornecido pelo usuário é primo.</li><li>O programa deve exibir na tela se o número é primo ou não.</li></ol><h3 id="dicas-3" tabindex="-1"><a class="header-anchor" href="#dicas-3" aria-hidden="true">#</a> Dicas:</h3><ul><li>Utilize funções para organizar e simplificar seu código.</li><li>Considere utilizar loops e estruturas condicionais para verificar a primalidade do número.</li><li>Preste atenção na formatação e na legibilidade do código para torná-lo fácil de entender e manter.</li><li>Valide a entrada do usuário para garantir que apenas números inteiros positivos sejam aceitos.</li></ul><p>Este desafio ajudará o estagiário a praticar a lógica de programação, o uso de funções, loops e estruturas condicionais, além de melhorar suas habilidades com operações matemáticas e testes de divisibilidade.</p><h2 id="desafio-5-criar-uma-calculadora-simples" tabindex="-1"><a class="header-anchor" href="#desafio-5-criar-uma-calculadora-simples" aria-hidden="true">#</a> Desafio 5: Criar uma calculadora simples</h2><p><strong>Objetivo</strong>: Desenvolver uma calculadora simples que execute as quatro operações básicas: adição, subtração, multiplicação e divisão.</p><h3 id="requisitos-4" tabindex="-1"><a class="header-anchor" href="#requisitos-4" aria-hidden="true">#</a> Requisitos:</h3><ol><li>O programa deve solicitar ao usuário que insira dois números.</li><li>Em seguida, deve apresentar um menu com as quatro operações básicas disponíveis (adição, subtração, multiplicação e divisão) e solicitar que o usuário escolha a operação desejada.</li><li>O programa deve executar a operação escolhida e exibir o resultado na tela.</li><li>Após a exibição do resultado, o programa deve perguntar se o usuário deseja realizar outra operação. Se a resposta for positiva, o programa deve retornar ao passo 1; caso contrário, deve encerrar.</li></ol><h3 id="dicas-4" tabindex="-1"><a class="header-anchor" href="#dicas-4" aria-hidden="true">#</a> Dicas:</h3><ul><li>Utilize funções para organizar e simplificar seu código.</li><li>Lembre-se de tratar possíveis erros, como a divisão por zero.</li><li>Considere utilizar um loop para repetir o processo de cálculo enquanto o usuário desejar.</li><li>Preste atenção na formatação e na legibilidade do código para torná-lo fácil de entender e manter.</li></ul><p>Este desafio ajudará o estagiário a praticar a lógica de programação, o uso de funções e o tratamento de erros, além de melhorar suas habilidades com estruturas condicionais e loops.</p><h2 id="desafio-6-palindromo" tabindex="-1"><a class="header-anchor" href="#desafio-6-palindromo" aria-hidden="true">#</a> Desafio 6: Palíndromo</h2><p><strong>Objetivo</strong>: Desenvolver um programa que verifique se uma string é um palíndromo.</p><h3 id="requisitos-5" tabindex="-1"><a class="header-anchor" href="#requisitos-5" aria-hidden="true">#</a> Requisitos:</h3><ol><li>O programa deve solicitar ao usuário que digite uma string.</li><li>O algoritmo deve verificar se a string fornecida pelo usuário é um palíndromo, ou seja, se ela é igual quando lida de trás para frente.</li><li>O programa deve exibir na tela se a string é um palíndromo ou não.</li></ol><h3 id="dicas-5" tabindex="-1"><a class="header-anchor" href="#dicas-5" aria-hidden="true">#</a> Dicas:</h3><ul><li>Utilize funções para organizar e simplificar seu código.</li><li>Considere utilizar loops e estruturas condicionais para verificar se a string é um palíndromo.</li><li>Preste atenção na formatação e na legibilidade do código para torná-lo fácil de entender e manter.</li><li>Lembre-se de ignorar a diferença entre letras maiúsculas e minúsculas ao verificar se a string é um palíndromo.</li></ul><p>Este desafio ajudará o estagiário a praticar a lógica de programação, o uso de funções, loops e estruturas condicionais, além de melhorar suas habilidades com manipulação de strings e comparações de caracteres.</p><h2 id="desafio-7-ordenacao-de-numeros" tabindex="-1"><a class="header-anchor" href="#desafio-7-ordenacao-de-numeros" aria-hidden="true">#</a> Desafio 7: Ordenação de números</h2><p><strong>Objetivo</strong>: Escrever um algoritmo que ordene uma lista de números em ordem crescente.</p><h3 id="requisitos-6" tabindex="-1"><a class="header-anchor" href="#requisitos-6" aria-hidden="true">#</a> Requisitos:</h3><ol><li>O programa deve solicitar ao usuário que digite uma lista de números (separados por vírgula, espaço ou qualquer outro delimitador que preferir).</li><li>O algoritmo deve ordenar a lista de números fornecida pelo usuário em ordem crescente.</li><li>O programa deve exibir na tela a lista de números ordenada.</li></ol><h3 id="dicas-6" tabindex="-1"><a class="header-anchor" href="#dicas-6" aria-hidden="true">#</a> Dicas:</h3><ul><li>Utilize funções para organizar e simplificar seu código.</li><li>Existem diversos algoritmos de ordenação que você pode implementar, como Bubble Sort, Selection Sort, Insertion Sort, entre outros. Pesquise sobre esses algoritmos e escolha o que achar mais adequado para resolver o desafio.</li><li>Preste atenção na formatação e na legibilidade do código para torná-lo fácil de entender e manter.</li></ul><p>Este desafio ajudará o estagiário a praticar a lógica de programação, o uso de funções, loops e estruturas condicionais, além de melhorar suas habilidades com manipulação de listas e implementação de algoritmos de ordenação.</p><h2 id="desafio-8-validacao-de-cpf" tabindex="-1"><a class="header-anchor" href="#desafio-8-validacao-de-cpf" aria-hidden="true">#</a> Desafio 8: Validação de CPF</h2><p><strong>Objetivo</strong>: Criar um algoritmo que valide um número de CPF.</p><h3 id="requisitos-7" tabindex="-1"><a class="header-anchor" href="#requisitos-7" aria-hidden="true">#</a> Requisitos:</h3><ol><li>O programa deve solicitar ao usuário que digite um número de CPF (somente os dígitos).</li><li>O algoritmo deve verificar se o número de CPF fornecido é válido de acordo com as regras de validação.</li><li>O programa deve exibir na tela se o CPF é válido ou inválido.</li></ol><h3 id="regras-de-validacao-do-cpf" tabindex="-1"><a class="header-anchor" href="#regras-de-validacao-do-cpf" aria-hidden="true">#</a> Regras de validação do CPF:</h3><ol><li>O CPF deve ter exatamente 11 dígitos.</li><li>Todos os dígitos do CPF devem ser numéricos.</li><li>O CPF não pode ter todos os dígitos iguais (ex: 111.111.111-11, 222.222.222-22, etc.).</li><li>O CPF deve ter dois dígitos verificadores (os dois últimos dígitos) que são calculados com base nos nove primeiros dígitos utilizando o algoritmo de validação do CPF. a. Calcule o primeiro dígito verificador multiplicando os 9 primeiros dígitos pela sequência decrescente de números de 10 a 2 e somando os resultados. Em seguida, divida a soma por 11. Se o resto da divisão for menor que 2, o primeiro dígito verificador é 0; caso contrário, subtraia o resto de 11 para obter o primeiro dígito verificador. b. Calcule o segundo dígito verificador da mesma forma, mas agora considere os 9 primeiros dígitos do CPF e o primeiro dígito verificador, e multiplique-os pela sequência decrescente de números de 11 a 2. Se o resto da divisão por 11 for menor que 2, o segundo dígito verificador é 0; caso contrário, subtraia o resto de 11 para obter o segundo dígito verificador.</li><li>Verifique se os dígitos verificadores calculados são iguais aos fornecidos pelo usuário.</li></ol><h3 id="dicas-7" tabindex="-1"><a class="header-anchor" href="#dicas-7" aria-hidden="true">#</a> Dicas:</h3><ul><li>Utilize funções para organizar e simplificar seu código.</li><li>Preste atenção na formatação e na legibilidade do código para torná-lo fácil de entender e manter.</li></ul><p>Este desafio ajudará o estagiário a praticar a lógica de programação, o uso de funções, loops e estruturas condicionais, além de melhorar suas habilidades com manipulação de strings e implementação de algoritmos de validação.</p>',59);function g(f,v){const o=d("ExternalLinkIcon");return l(),t("div",null,[u,a("p",null,[a("a",c,[e("Curso de Lógica de Programação"),i(o)])]),m,a("p",null,[a("a",p,[e("Curso Lógica de Programação Completo 2021 [Iniciantes] + Desafios + Muita prática"),i(o)])]),h])}const q=s(n,[["render",g],["__file","index.html.vue"]]);export{q as default};
