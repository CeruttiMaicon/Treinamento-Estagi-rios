import{_ as i,M as r,p as c,q as t,R as e,t as a,N as s,a1 as n}from"./framework-5866ffd3.js";const d={},l=n('<h1 id="docker-basico" tabindex="-1"><a class="header-anchor" href="#docker-basico" aria-hidden="true">#</a> Docker básico</h1><p>Neste módulo, os estagiários aprenderão os conceitos básicos do Docker e como usá-lo para facilitar o desenvolvimento e a implantação de aplicações.</p><h2 id="aulas" tabindex="-1"><a class="header-anchor" href="#aulas" aria-hidden="true">#</a> Aulas</h2><h3 id="aula-linuxtips" tabindex="-1"><a class="header-anchor" href="#aula-linuxtips" aria-hidden="true">#</a> Aula LinuxTips</h3>',4),p={href:"https://www.youtube.com/playlist?list=PLf-O3X2-mxDn1VpyU2q3fuI6YYeIWp5rR",target:"_blank",rel:"noopener noreferrer"},u=e("h3",{id:"videos-diolinux",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#videos-diolinux","aria-hidden":"true"},"#"),a(" Vídeos Diolinux")],-1),m={href:"https://www.youtube.com/watch?v=ntbpIfS44Gw",target:"_blank",rel:"noopener noreferrer"},k=n('<h1 id="desafios" tabindex="-1"><a class="header-anchor" href="#desafios" aria-hidden="true">#</a> Desafios</h1><h2 id="desafio-1-introducao-ao-docker" tabindex="-1"><a class="header-anchor" href="#desafio-1-introducao-ao-docker" aria-hidden="true">#</a> Desafio 1: Introdução ao Docker</h2><p><strong>Objetivo</strong>: Aprenda os fundamentos do Docker, sua história e como ele funciona, incluindo a arquitetura de contêineres e imagens.</p><h3 id="topicos-a-serem-abordados" tabindex="-1"><a class="header-anchor" href="#topicos-a-serem-abordados" aria-hidden="true">#</a> Tópicos a serem abordados:</h3><ol><li>História do Docker</li><li>Conceito de contêineres</li><li>Arquitetura do Docker</li><li>Imagens e contêineres</li></ol><h3 id="atividades-propostas" tabindex="-1"><a class="header-anchor" href="#atividades-propostas" aria-hidden="true">#</a> Atividades propostas:</h3><ol><li>Pesquise sobre a história do Docker e como ele se tornou uma ferramenta essencial no desenvolvimento e implantação de software.</li><li>Entenda o conceito de contêineres e como eles diferem das máquinas virtuais tradicionais.</li><li>Estude a arquitetura do Docker, incluindo o Docker Engine, o Docker Hub e os componentes-chave, como imagens e contêineres.</li><li>Aprenda como as imagens e os contêineres funcionam, incluindo a camada de sistema de arquivos e a relação entre imagens e contêineres.</li></ol><p>Ao concluir este desafio, o estagiário terá uma compreensão básica do Docker, sua arquitetura e como ele funciona, incluindo o conceito de contêineres e imagens.</p><h2 id="desafio-2-instalacao-do-docker" tabindex="-1"><a class="header-anchor" href="#desafio-2-instalacao-do-docker" aria-hidden="true">#</a> Desafio 2: Instalação do Docker</h2><p><strong>Objetivo</strong>: Instalar o Docker no seu computador e verificar se ele está funcionando corretamente.</p><h3 id="topicos-a-serem-abordados-1" tabindex="-1"><a class="header-anchor" href="#topicos-a-serem-abordados-1" aria-hidden="true">#</a> Tópicos a serem abordados:</h3><ol><li>Requisitos do sistema</li><li>Instalação do Docker</li><li>Verificação da instalação</li></ol><h3 id="atividades-propostas-1" tabindex="-1"><a class="header-anchor" href="#atividades-propostas-1" aria-hidden="true">#</a> Atividades propostas:</h3>',13),v=e("li",null,"Verifique os requisitos do sistema para instalar o Docker no seu computador (Windows, macOS ou Linux).",-1),h={href:"https://docs.docker.com/desktop/windows/install/",target:"_blank",rel:"noopener noreferrer"},b={href:"https://docs.docker.com/desktop/mac/install/",target:"_blank",rel:"noopener noreferrer"},g={href:"https://docs.docker.com/engine/install/",target:"_blank",rel:"noopener noreferrer"},f=e("li",null,[a("Após a instalação, verifique se o Docker está funcionando corretamente executando o comando "),e("code",null,"docker --version"),a(" no terminal ou prompt de comando.")],-1),x=e("li",null,[a("Teste a instalação executando um contêiner de teste com o comando "),e("code",null,"docker run hello-world"),a(".")],-1),_=n('<p>Ao concluir este desafio, o estagiário terá o Docker instalado e funcionando corretamente no seu computador.</p><h2 id="desafio-3-executando-conteineres" tabindex="-1"><a class="header-anchor" href="#desafio-3-executando-conteineres" aria-hidden="true">#</a> Desafio 3: Executando contêineres</h2><p><strong>Objetivo</strong>: Praticar a execução de contêineres com comandos básicos do Docker, como <code>docker run</code>, <code>docker ps</code>, <code>docker stop</code> e <code>docker rm</code>.</p><h3 id="topicos-a-serem-abordados-2" tabindex="-1"><a class="header-anchor" href="#topicos-a-serem-abordados-2" aria-hidden="true">#</a> Tópicos a serem abordados:</h3><ol><li>Execução de contêineres</li><li>Listagem de contêineres</li><li>Parando e removendo contêineres</li></ol><h3 id="atividades-propostas-2" tabindex="-1"><a class="header-anchor" href="#atividades-propostas-2" aria-hidden="true">#</a> Atividades propostas:</h3><ol><li>Execute um contêiner do nginx com o comando: <code>docker run --name my-nginx -p 80:80 -d nginx</code>. Isso iniciará um contêiner com o servidor web nginx e mapeará a porta 80 do seu computador para a porta 80 do contêiner.</li><li>Verifique se o contêiner está em execução com o comando: <code>docker ps</code>. Isso listará todos os contêineres em execução no seu computador.</li><li>Acesse <code>http://localhost</code> no seu navegador. Você deve ver a página padrão do nginx.</li><li>Pare o contêiner do nginx com o comando: <code>docker stop my-nginx</code>.</li><li>Verifique se o contêiner foi parado com o comando: <code>docker ps -a</code>. Isso listará todos os contêineres no seu computador, incluindo os que estão parados.</li><li>Remova o contêiner do nginx com o comando: <code>docker rm my-nginx</code>.</li><li>Verifique se o contêiner foi removido com o comando: <code>docker ps -a</code>.</li></ol><p>Ao concluir este desafio, o estagiário terá praticado a execução, listagem, parada e remoção de contêineres usando comandos básicos do Docker.</p><h2 id="desafio-4-trabalhando-com-imagens" tabindex="-1"><a class="header-anchor" href="#desafio-4-trabalhando-com-imagens" aria-hidden="true">#</a> Desafio 4: Trabalhando com imagens</h2><p><strong>Objetivo</strong>: Aprender a trabalhar com imagens Docker usando comandos como <code>docker images</code>, <code>docker pull</code>, <code>docker rmi</code> e <code>docker search</code>.</p><h3 id="topicos-a-serem-abordados-3" tabindex="-1"><a class="header-anchor" href="#topicos-a-serem-abordados-3" aria-hidden="true">#</a> Tópicos a serem abordados:</h3><ol><li>Listagem de imagens</li><li>Download de imagens</li><li>Remoção de imagens</li><li>Pesquisa de imagens</li></ol><h3 id="atividades-propostas-3" tabindex="-1"><a class="header-anchor" href="#atividades-propostas-3" aria-hidden="true">#</a> Atividades propostas:</h3><ol><li>Liste todas as imagens disponíveis localmente com o comando: <code>docker images</code>. Isso mostrará informações sobre as imagens que você já baixou.</li><li>Baixe a imagem do Redis com o comando: <code>docker pull redis</code>. Isso fará o download da imagem oficial do Redis do Docker Hub.</li><li>Verifique se a imagem do Redis foi baixada com o comando: <code>docker images</code>.</li><li>Pesquise imagens relacionadas ao Node.js no Docker Hub com o comando: <code>docker search node</code>. Isso retornará uma lista de imagens disponíveis relacionadas ao Node.js.</li><li>Remova a imagem do Redis com o comando: <code>docker rmi redis</code>.</li><li>Verifique se a imagem foi removida com o comando: <code>docker images</code>.</li></ol><p>Ao concluir este desafio, o estagiário terá praticado a listagem, download, pesquisa e remoção de imagens Docker usando comandos específicos.</p><h2 id="desafio-5-criando-um-dockerfile-para-uma-aplicacao-laravel-com-sail" tabindex="-1"><a class="header-anchor" href="#desafio-5-criando-um-dockerfile-para-uma-aplicacao-laravel-com-sail" aria-hidden="true">#</a> Desafio 5: Criando um Dockerfile para uma aplicação Laravel com Sail</h2><p><strong>Objetivo</strong>: Criar um Dockerfile para uma aplicação Laravel e executá-la usando o Laravel Sail.</p><h3 id="topicos-a-serem-abordados-4" tabindex="-1"><a class="header-anchor" href="#topicos-a-serem-abordados-4" aria-hidden="true">#</a> Tópicos a serem abordados:</h3><ol><li>Instalação do Laravel Sail</li><li>Configuração do Dockerfile</li><li>Construção de uma imagem personalizada</li><li>Execução da aplicação Laravel com Sail</li></ol><h3 id="atividades-propostas-4" tabindex="-1"><a class="header-anchor" href="#atividades-propostas-4" aria-hidden="true">#</a> Atividades propostas:</h3>',20),D={class:"custom-container warning"},q=e("p",{class:"custom-container-title"},"ATENÇÃO",-1),y=e("p",null,"Antes de prosseguir, leia a documentação oficial do Laravel Sail para entender como ele funciona e como ele pode ser integrado a um projeto Laravel existente. Lá existem varias opções de setar os arquivos de configuração do Sail e os containers que serão utilizados dependendo das tecnologias que você irá utilizar no seu projeto.",-1),A={href:"https://laravel.com/docs/10.x/sail#main-content",target:"_blank",rel:"noopener noreferrer"},L=n(`<ol><li>Instale o Laravel Sail no seu projeto Laravel existente ou crie um novo projeto Laravel com o Sail já integrado usando o comando:</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-s</span> <span class="token string">&quot;https://laravel.build/example-app&quot;</span> <span class="token operator">|</span> <span class="token function">bash</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Substitua &quot;example-app&quot; pelo nome do seu projeto.</p><ol start="2"><li><p>Na raiz do projeto, você encontrará o arquivo &quot;docker-compose.yml&quot; e a pasta &quot;docker&quot;. Esses arquivos já contêm as configurações necessárias para executar a aplicação Laravel com o Sail.</p></li><li><p>O Sail já possui um Dockerfile na pasta &quot;docker&quot; chamado &quot;Dockerfile.laravel&quot;. Abra-o e verifique seu conteúdo. Ele já contém as instruções necessárias para construir uma imagem com o ambiente PHP e todas as dependências necessárias para o Laravel.</p></li><li><p>Abra o terminal e navegue até a raiz do projeto Laravel.</p></li><li><p>Execute o comando <code>./vendor/bin/sail build</code> para construir a imagem Docker. Isso pode levar algum tempo na primeira execução.</p></li><li><p>Após a construção da imagem, inicie a aplicação Laravel com o Sail usando o comando <code>./vendor/bin/sail up</code>. O Sail iniciará todos os serviços necessários, incluindo o servidor web e o banco de dados.</p></li><li><p>Abra o navegador e visite <code>http://localhost</code> para visualizar a aplicação Laravel em execução.</p></li></ol><p>Ao concluir este desafio, o estagiário terá configurado e executado uma aplicação Laravel usando o Laravel Sail e o Docker.</p><h2 id="desafio-6-utilizacao-do-docker-composer" tabindex="-1"><a class="header-anchor" href="#desafio-6-utilizacao-do-docker-composer" aria-hidden="true">#</a> Desafio 6: Utilização do Docker Composer</h2><p><strong>Objetivo</strong>: Aprender a utilizar o Docker Compose para gerenciar múltiplos contêineres de uma aplicação.</p><h3 id="topicos-a-serem-abordados-5" tabindex="-1"><a class="header-anchor" href="#topicos-a-serem-abordados-5" aria-hidden="true">#</a> Tópicos a serem abordados:</h3><ol><li>Introdução ao Docker Compose</li><li>Instalação do Docker Compose</li><li>Criação e configuração de um arquivo docker-compose.yml</li><li>Comandos básicos do Docker Compose</li><li>Uso do Docker Compose em um projeto prático</li></ol><h3 id="atividades-propostas-5" tabindex="-1"><a class="header-anchor" href="#atividades-propostas-5" aria-hidden="true">#</a> Atividades propostas:</h3><ol><li><p>Pesquise sobre o Docker Compose e entenda sua utilidade para gerenciar aplicativos que consistem em múltiplos contêineres.</p></li><li><p>Instale o Docker Compose em seu computador, seguindo as instruções fornecidas na documentação oficial: https://docs.docker.com/compose/install/</p></li><li><p>Crie um arquivo <code>docker-compose.yml</code> para um projeto que inclua dois contêineres: um para um servidor web e outro para um banco de dados. Por exemplo, você pode usar a imagem <code>nginx</code> para o servidor web e a imagem <code>mysql</code> para o banco de dados. Configure o arquivo <code>docker-compose.yml</code> com as informações necessárias, como a versão do Docker Compose, serviços, imagens, portas e volumes.</p><p>Exemplo de configuração básica:</p></li></ol><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&#39;3&#39;</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>
    <span class="token key atrule">mariadb</span><span class="token punctuation">:</span>
        <span class="token key atrule">command</span><span class="token punctuation">:</span>
            <span class="token punctuation">-</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>table_definition_cache=2048
            <span class="token punctuation">-</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>innodb<span class="token punctuation">-</span>buffer<span class="token punctuation">-</span>pool<span class="token punctuation">-</span>size=3G
        <span class="token key atrule">image</span><span class="token punctuation">:</span> <span class="token string">&#39;mariadb:10&#39;</span>
        <span class="token key atrule">ports</span><span class="token punctuation">:</span>
            <span class="token punctuation">-</span> <span class="token string">&#39;3306:3306&#39;</span>
        <span class="token key atrule">environment</span><span class="token punctuation">:</span>
            <span class="token key atrule">MYSQL_ROOT_PASSWORD</span><span class="token punctuation">:</span> <span class="token string">&#39;password&#39;</span>
            <span class="token key atrule">MYSQL_ROOT_HOST</span><span class="token punctuation">:</span> <span class="token string">&quot;%&quot;</span>
            <span class="token key atrule">MYSQL_DATABASE</span><span class="token punctuation">:</span> <span class="token string">&#39;meu_banco_de_dados&#39;</span>
            <span class="token key atrule">MYSQL_USER</span><span class="token punctuation">:</span> <span class="token string">&#39;root&#39;</span>
            <span class="token key atrule">MYSQL_PASSWORD</span><span class="token punctuation">:</span> <span class="token string">&#39;password&#39;</span>
            <span class="token key atrule">MYSQL_ALLOW_EMPTY_PASSWORD</span><span class="token punctuation">:</span> <span class="token string">&#39;yes&#39;</span>
        <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
            <span class="token punctuation">-</span> <span class="token string">&#39;sail-mariadb:/var/lib/mysql&#39;</span>
        <span class="token key atrule">networks</span><span class="token punctuation">:</span>
            <span class="token punctuation">-</span> sail
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>Aprenda e pratique os comandos básicos do Docker Compose:</li></ol><ul><li><code>docker-compose up</code>: Inicia e executa os contêineres descritos no arquivo <code>docker-compose.yml</code>.</li><li><code>docker-compose down</code>: Interrompe e remove os contêineres, redes e volumes definidos no arquivo <code>docker-compose.yml</code>.</li><li><code>docker-compose ps</code>: Lista os contêineres em execução e seu status.</li><li><code>docker-compose logs</code>: Exibe os logs dos contêineres.</li><li><code>docker-compose build</code>: Constrói as imagens, caso você esteja usando um Dockerfile personalizado.</li></ul><ol start="5"><li>Utilize o Docker Compose em um projeto prático. Por exemplo, crie uma aplicação web simples que se conecte a um banco de dados MySQL. Configure o projeto para ser executado com o Docker Compose e teste a funcionalidade da aplicação.</li></ol><p>Ao concluir este desafio, o estagiário terá aprendido a utilizar o Docker Compose para gerenciar e executar aplicativos que envolvem múltiplos contêineres, tornando o processo de desenvolvimento e implantação mais eficiente e organizado.</p><h2 id="desafio-7-utilizacao-do-portainer" tabindex="-1"><a class="header-anchor" href="#desafio-7-utilizacao-do-portainer" aria-hidden="true">#</a> Desafio 7: Utilização do Portainer</h2><p><strong>Objetivo</strong>: Aprender a usar o Portainer, uma interface gráfica para gerenciar contêineres e imagens Docker.</p><h3 id="topicos-a-serem-abordados-6" tabindex="-1"><a class="header-anchor" href="#topicos-a-serem-abordados-6" aria-hidden="true">#</a> Tópicos a serem abordados:</h3><ol><li>Instalação do Portainer</li><li>Configuração e conexão com o Docker</li><li>Gerenciamento de contêineres e imagens</li><li>Explorar recursos e funcionalidades do Portainer</li></ol><h3 id="atividades-propostas-6" tabindex="-1"><a class="header-anchor" href="#atividades-propostas-6" aria-hidden="true">#</a> Atividades propostas:</h3><ol><li>Instale o Portainer em seu computador executando o seguinte comando no terminal:</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">8000</span>:8000 <span class="token parameter variable">-p</span> <span class="token number">9000</span>:9000 <span class="token parameter variable">--name</span><span class="token operator">=</span>portainer <span class="token parameter variable">--restart</span><span class="token operator">=</span>always <span class="token parameter variable">-v</span> /var/run/docker.sock:/var/run/docker.sock <span class="token parameter variable">-v</span> portainer_data:/data portainer/portainer-ce
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Esse comando baixa a imagem do Portainer e executa em um contêiner com as portas 8000 e 9000 expostas.</p><ol start="2"><li><p>Após a instalação, abra o navegador e visite <code>http://localhost:9000</code> para acessar a interface do Portainer. Complete o processo de configuração criando um nome de usuário e senha.</p></li><li><p>Conecte o Portainer ao Docker, selecionando a opção &quot;Docker local&quot; e clicando em &quot;Conectar&quot;. Agora, você verá um painel com informações sobre contêineres, imagens, volumes e redes.</p></li><li><p>Explore a interface do Portainer e pratique as seguintes atividades:</p></li></ol><ul><li>Visualize a lista de contêineres e suas informações, como status, imagem e porta.</li><li>Inicie, pare, reinicie ou remova contêineres.</li><li>Crie um novo contêiner a partir de uma imagem.</li><li>Visualize a lista de imagens e suas informações, como tamanho e tags.</li><li>Baixe uma nova imagem a partir do registro do Docker.</li><li>Remova imagens não utilizadas.</li><li>Explore outros recursos, como gerenciamento de volumes e redes.</li></ul><p>Ao concluir este desafio, o estagiário terá aprendido a gerenciar contêineres e imagens Docker usando o Portainer, uma interface gráfica intuitiva.</p><h3 id="portainer-opcao-2-mais-facil" tabindex="-1"><a class="header-anchor" href="#portainer-opcao-2-mais-facil" aria-hidden="true">#</a> Portainer opção 2 (mais fácil)</h3><p>Adicione essas instruções para o seu docker-compose.yml</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token punctuation">...</span>
    <span class="token key atrule">portainer</span><span class="token punctuation">:</span>
        <span class="token key atrule">image</span><span class="token punctuation">:</span> portainer/portainer<span class="token punctuation">-</span>ce<span class="token punctuation">:</span>latest
        <span class="token key atrule">restart</span><span class="token punctuation">:</span> unless<span class="token punctuation">-</span>stopped
        <span class="token key atrule">security_opt</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> no<span class="token punctuation">-</span>new<span class="token punctuation">-</span>privileges<span class="token punctuation">:</span><span class="token boolean important">true</span>
        <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> /etc/localtime<span class="token punctuation">:</span>/etc/localtime<span class="token punctuation">:</span>ro
        <span class="token punctuation">-</span> /var/run/docker.sock<span class="token punctuation">:</span>/var/run/docker.sock<span class="token punctuation">:</span>ro
        <span class="token punctuation">-</span> ./portainer<span class="token punctuation">-</span>data<span class="token punctuation">:</span>/data
        <span class="token key atrule">ports</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> 9000<span class="token punctuation">:</span><span class="token number">9000</span>
<span class="token punctuation">...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,30),S={href:"http://localhost:9000",target:"_blank",rel:"noopener noreferrer"};function C(I,w){const o=r("ExternalLinkIcon");return c(),t("div",null,[l,e("p",null,[e("a",p,[a("Descomplicando o Docker"),s(o)])]),u,e("p",null,[e("a",m,[a("O mínimo que você precisa saber sobre Docker!"),s(o)])]),k,e("ol",null,[v,e("li",null,[a("Siga as instruções oficiais de instalação do Docker para seu sistema operacional: "),e("ul",null,[e("li",null,[e("a",h,[a("Instalar Docker no Windows"),s(o)])]),e("li",null,[e("a",b,[a("Instalar Docker no macOS"),s(o)])]),e("li",null,[e("a",g,[a("Instalar Docker no Linux"),s(o)])])])]),f,x]),_,e("div",D,[q,y,e("p",null,[e("a",A,[a("Documentação Laravel 10 - Sail"),s(o)])])]),L,e("p",null,[a("O servidor estará disponível em "),e("a",S,[a("http://localhost:9000"),s(o)]),a(". Lembrando que no seu primeiro acesso ele pedirá para criar um usuário e senha.")])])}const j=i(d,[["render",C],["__file","index.html.vue"]]);export{j as default};
