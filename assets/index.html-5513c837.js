import{_ as i,M as s,p as r,q as d,R as e,t as n,N as t,a1 as a}from"./framework-5866ffd3.js";const l={},c=a('<h1 id="versionamento-de-codigo-git-e-fluxo-de-desenvolvimento" tabindex="-1"><a class="header-anchor" href="#versionamento-de-codigo-git-e-fluxo-de-desenvolvimento" aria-hidden="true">#</a> Versionamento de código GIT e Fluxo de Desenvolvimento</h1><p>Neste módulo, os estagiários aprenderão sobre o sistema de controle de versão Git e o fluxo de desenvolvimento utilizando o versionamento semântico.</p><h2 id="aulas" tabindex="-1"><a class="header-anchor" href="#aulas" aria-hidden="true">#</a> Aulas</h2><h3 id="aula-curso-em-video" tabindex="-1"><a class="header-anchor" href="#aula-curso-em-video" aria-hidden="true">#</a> Aula Curso em Vídeo</h3>',4),u={href:"https://www.youtube.com/playlist?list=PLHz_AreHm4dm7ZULPAmadvNhH6vk9oNZA",target:"_blank",rel:"noopener noreferrer"},m=a(`<h1 id="desafios" tabindex="-1"><a class="header-anchor" href="#desafios" aria-hidden="true">#</a> Desafios</h1><h2 id="desafio-1-instalacao-e-configuracao-do-git" tabindex="-1"><a class="header-anchor" href="#desafio-1-instalacao-e-configuracao-do-git" aria-hidden="true">#</a> Desafio 1: Instalação e configuração do Git</h2><p><strong>Objetivo</strong>: Instalar o Git no seu computador e configurar seu nome de usuário e e-mail.</p><h3 id="topicos-a-serem-estudados" tabindex="-1"><a class="header-anchor" href="#topicos-a-serem-estudados" aria-hidden="true">#</a> Tópicos a serem estudados:</h3><ol><li>Instalação do Git: Aprenda a instalar o Git no seu sistema operacional (Linux, macOS ou Windows).</li><li>Configuração básica do Git: Aprenda a configurar seu nome de usuário e e-mail para que seus commits sejam atribuídos corretamente.</li></ol><h3 id="atividades-propostas" tabindex="-1"><a class="header-anchor" href="#atividades-propostas" aria-hidden="true">#</a> Atividades propostas:</h3><ol><li>Instale o Git no seu computador seguindo as instruções de instalação para o seu sistema operacional. <ul><li>Linux: Use o gerenciador de pacotes da sua distribuição (por exemplo, <code>apt-get</code>, <code>yum</code> ou <code>pacman</code>).</li><li>macOS: Use o Homebrew (<code>brew install git</code>) ou baixe o instalador do site oficial do Git.</li><li>Windows: Baixe o instalador do site oficial do Git e siga as instruções de instalação.</li></ul></li><li>Configure seu nome de usuário e e-mail no Git com os seguintes comandos:</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">&quot;Seu Nome&quot;</span>
<span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token string">&quot;seu.email@exemplo.com&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>Verifique se a configuração foi aplicada corretamente executando:</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> config <span class="token parameter variable">--list</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Seu nome de usuário e e-mail devem ser exibidos na lista de configurações.</p><p>Este desafio ajudará o estagiário a instalar e configurar o Git, preparando-o para trabalhar com projetos de código-fonte controlados por versionamento.</p><h2 id="desafio-2-inicializar-um-repositorio-git" tabindex="-1"><a class="header-anchor" href="#desafio-2-inicializar-um-repositorio-git" aria-hidden="true">#</a> Desafio 2: Inicializar um repositório Git</h2><p><strong>Objetivo</strong>: Criar um novo diretório e inicializar um repositório Git nele.</p><h3 id="topicos-a-serem-estudados-1" tabindex="-1"><a class="header-anchor" href="#topicos-a-serem-estudados-1" aria-hidden="true">#</a> Tópicos a serem estudados:</h3><ol><li>Criar um novo diretório: Aprenda a criar um diretório para o seu projeto.</li><li>Inicializar um repositório Git: Aprenda a transformar um diretório comum em um repositório Git.</li></ol><h3 id="atividades-propostas-1" tabindex="-1"><a class="header-anchor" href="#atividades-propostas-1" aria-hidden="true">#</a> Atividades propostas:</h3><ol><li>Crie um novo diretório para o seu projeto. Você pode usar o comando <code>mkdir</code> para criar um diretório. Por exemplo:</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> meu-projeto
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>Navegue até o diretório que você acabou de criar usando o comando <code>cd</code>. Por exemplo:</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> meu-projeto
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li>Inicialize um repositório Git no diretório atual usando o comando <code>git init</code>. O comando deve retornar uma mensagem informando que o repositório foi inicializado. Por exemplo:</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> init
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Saída esperada: <code>Initialized empty Git repository in /caminho/para/seu/diretório/meu-projeto/.git/</code></p><p>Ao concluir este desafio, o estagiário terá criado um novo diretório e inicializado um repositório Git nele, estando pronto para começar a rastrear as alterações no projeto.</p><h2 id="desafio-3-adicionar-e-confirmar-alteracoes" tabindex="-1"><a class="header-anchor" href="#desafio-3-adicionar-e-confirmar-alteracoes" aria-hidden="true">#</a> Desafio 3: Adicionar e confirmar alterações</h2><p><strong>Objetivo</strong>: Adicionar alguns arquivos ao seu repositório e fazer commit das alterações.</p><h3 id="topicos-a-serem-estudados-2" tabindex="-1"><a class="header-anchor" href="#topicos-a-serem-estudados-2" aria-hidden="true">#</a> Tópicos a serem estudados:</h3><ol><li>Criar arquivos: Aprenda a criar arquivos para o seu projeto.</li><li><code>git add</code>: Aprenda a adicionar arquivos ao índice do Git.</li><li><code>git commit</code>: Aprenda a confirmar alterações e criar um novo commit.</li></ol><h3 id="atividades-propostas-2" tabindex="-1"><a class="header-anchor" href="#atividades-propostas-2" aria-hidden="true">#</a> Atividades propostas:</h3><ol><li>Crie um novo arquivo no diretório do seu projeto. Você pode usar o comando <code>touch</code> para criar um arquivo vazio ou utilizar seu editor de texto favorito. Por exemplo:</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">touch</span> arquivo.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>Adicione conteúdo ao arquivo criado utilizando seu editor de texto preferido.</li><li>Verifique o status do seu repositório Git com o comando <code>git status</code>. O arquivo criado deve aparecer como &quot;não rastreado&quot; (untracked).</li><li>Adicione o arquivo ao índice do Git utilizando o comando <code>git add</code>. Por exemplo:</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> <span class="token function">add</span> arquivo.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="5"><li>Verifique novamente o status do seu repositório Git com o comando <code>git status</code>. O arquivo agora deve aparecer como &quot;pronto para commit&quot; (staged).</li><li>Faça commit das alterações utilizando o comando <code>git commit</code>, incluindo uma mensagem de commit descritiva. Por exemplo:</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&quot;Adiciona arquivo.txt ao repositório&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Ao concluir este desafio, o estagiário terá adicionado um arquivo ao repositório e confirmado as alterações, criando um novo commit.</p><h2 id="desafio-4-criar-e-mesclar-branches" tabindex="-1"><a class="header-anchor" href="#desafio-4-criar-e-mesclar-branches" aria-hidden="true">#</a> Desafio 4: Criar e mesclar branches</h2><p><strong>Objetivo</strong>: Criar uma nova branch, fazer alterações nela e, em seguida, fazer o merge das alterações na branch principal.</p><h3 id="topicos-a-serem-estudados-3" tabindex="-1"><a class="header-anchor" href="#topicos-a-serem-estudados-3" aria-hidden="true">#</a> Tópicos a serem estudados:</h3><ol><li>Branches: Entenda o conceito de branches no Git e como eles são utilizados.</li><li><code>git branch</code>: Aprenda a criar e listar branches.</li><li><code>git checkout</code>: Aprenda a alternar entre branches.</li><li><code>git merge</code>: Aprenda a mesclar branches.</li></ol><h3 id="atividades-propostas-3" tabindex="-1"><a class="header-anchor" href="#atividades-propostas-3" aria-hidden="true">#</a> Atividades propostas:</h3><ol><li>Liste todas as branches do seu repositório com o comando <code>git branch</code>. A branch principal (main ou master) deve ser a única existente no momento.</li><li>Crie uma nova branch chamada &quot;nova-funcionalidade&quot; utilizando o comando <code>git branch</code>. Por exemplo:</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> branch nova-funcionalidade
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li>Alterne para a nova branch criada utilizando o comando <code>git checkout</code>. Por exemplo:</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> checkout nova-funcionalidade
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="4"><li>Crie um novo arquivo ou modifique um arquivo existente na branch &quot;nova-funcionalidade&quot;.</li><li>Adicione e faça commit das alterações na branch &quot;nova-funcionalidade&quot;.</li><li>Alterne de volta para a branch principal (main ou master) com o comando <code>git checkout</code>. Por exemplo:</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> checkout main
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>ou</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> checkout master
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="7"><li>Faça o merge da branch &quot;nova-funcionalidade&quot; na branch principal utilizando o comando <code>git merge</code>. Por exemplo:</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> merge nova-funcionalidade
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Ao concluir este desafio, o estagiário terá criado uma nova branch, feito alterações nela e mesclado as alterações na branch principal.</p><h2 id="desafio-5-resolver-conflitos-de-merge" tabindex="-1"><a class="header-anchor" href="#desafio-5-resolver-conflitos-de-merge" aria-hidden="true">#</a> Desafio 5: Resolver conflitos de merge</h2><p><strong>Objetivo</strong>: Intencionalmente criar um conflito de merge e resolvê-lo.</p><h3 id="topicos-a-serem-estudados-4" tabindex="-1"><a class="header-anchor" href="#topicos-a-serem-estudados-4" aria-hidden="true">#</a> Tópicos a serem estudados:</h3><ol><li>Conflitos de merge: Entenda o que são conflitos de merge e quando eles ocorrem.</li><li>Resolvendo conflitos: Aprenda a resolver conflitos de merge manualmente.</li></ol><h3 id="atividades-propostas-4" tabindex="-1"><a class="header-anchor" href="#atividades-propostas-4" aria-hidden="true">#</a> Atividades propostas:</h3><ol><li>Na branch principal (main ou master), crie ou modifique um arquivo existente.</li><li>Adicione e faça commit das alterações na branch principal.</li><li>Crie uma nova branch chamada &quot;conflito-merge&quot; utilizando o comando <code>git branch</code>. Por exemplo:</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> branch conflito-merge
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="4"><li>Alterne para a nova branch criada utilizando o comando <code>git checkout</code>. Por exemplo:</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> checkout conflito-merge
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="5"><li>Modifique o mesmo arquivo que você modificou na branch principal e altere as mesmas linhas de código.</li><li>Adicione e faça commit das alterações na branch &quot;conflito-merge&quot;.</li><li>Alterne de volta para a branch principal (main ou master) com o comando <code>git checkout</code>. Por exemplo:</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> checkout main
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="8"><li>Faça o merge da branch &quot;conflito-merge&quot; na branch principal utilizando o comando <code>git merge</code>. Por exemplo:</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> merge conflito-merge
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="9"><li>Observe que o Git informa um conflito de merge. Abra o arquivo com conflito no seu editor de texto e resolva o conflito manualmente, escolhendo quais alterações devem ser mantidas.</li><li>Adicione e faça commit das alterações no arquivo resolvido.</li></ol><p>Ao concluir este desafio, o estagiário terá criado intencionalmente um conflito de merge e resolvido-o manualmente.</p><h2 id="desafio-6-git-remoto" tabindex="-1"><a class="header-anchor" href="#desafio-6-git-remoto" aria-hidden="true">#</a> Desafio 6: Git remoto</h2><p><strong>Objetivo</strong>: Adicionar um repositório remoto ao seu projeto e fazer push das alterações para ele.</p><h3 id="topicos-a-serem-estudados-5" tabindex="-1"><a class="header-anchor" href="#topicos-a-serem-estudados-5" aria-hidden="true">#</a> Tópicos a serem estudados:</h3><ol><li>Repositórios remotos: Entenda o que são repositórios remotos e como eles funcionam no Git.</li><li>Adicionando um repositório remoto: Aprenda a adicionar um repositório remoto ao seu projeto Git local.</li><li>Push das alterações: Aprenda a fazer push das alterações do seu repositório local para o repositório remoto.</li></ol><h3 id="atividades-propostas-5" tabindex="-1"><a class="header-anchor" href="#atividades-propostas-5" aria-hidden="true">#</a> Atividades propostas:</h3><ol><li>Crie uma conta em um serviço de hospedagem de repositórios Git, como GitHub, GitLab ou Bitbucket, caso ainda não possua uma.</li><li>Crie um novo repositório vazio no serviço escolhido. Não inicialize o repositório com nenhum arquivo (README, .gitignore ou licença).</li><li>No seu repositório local, adicione o repositório remoto que você acabou de criar utilizando o comando <code>git remote add</code>. Por exemplo:</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> remote <span class="token function">add</span> origin URL_DO_REPOSITORIO
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Substitua <code>URL_DO_REPOSITORIO</code> pela URL do repositório que você criou no serviço de hospedagem. 4. Verifique se o repositório remoto foi adicionado corretamente utilizando o comando <code>git remote -v</code>. Você deve ver o nome &quot;origin&quot; e as URLs para fetch e push do seu repositório remoto. 5. Faça push das alterações do seu repositório local para o repositório remoto utilizando o comando <code>git push</code>. Por exemplo:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> push <span class="token parameter variable">-u</span> origin main
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>A opção <code>-u</code> cria uma relação de rastreamento entre as branches locais e remotas, facilitando futuros pushes e pulls.</p><p>Ao concluir este desafio, o estagiário terá adicionado um repositório remoto ao seu projeto Git local e realizado push das alterações para ele.</p><h2 id="desafio-7-git-pull-e-fetch" tabindex="-1"><a class="header-anchor" href="#desafio-7-git-pull-e-fetch" aria-hidden="true">#</a> Desafio 7: Git pull e fetch</h2><p><strong>Objetivo</strong>: Fazer pull e fetch das alterações do repositório remoto para o local.</p><h3 id="topicos-a-serem-estudados-6" tabindex="-1"><a class="header-anchor" href="#topicos-a-serem-estudados-6" aria-hidden="true">#</a> Tópicos a serem estudados:</h3><ol><li>Git pull: Entenda o que é o comando <code>git pull</code> e como ele é usado para obter e mesclar alterações do repositório remoto.</li><li>Git fetch: Aprenda o que é o comando <code>git fetch</code> e como ele é usado para obter atualizações do repositório remoto sem mesclar automaticamente.</li></ol><h3 id="atividades-propostas-6" tabindex="-1"><a class="header-anchor" href="#atividades-propostas-6" aria-hidden="true">#</a> Atividades propostas:</h3><ol><li>Faça algumas alterações no repositório remoto, como adicionar ou modificar arquivos. Você pode fazer isso diretamente no serviço de hospedagem de repositórios, como GitHub, GitLab ou Bitbucket.</li><li>No seu repositório local, utilize o comando <code>git pull</code> para obter e mesclar automaticamente as alterações do repositório remoto. Por exemplo:</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> pull origin main
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Verifique se as alterações feitas no repositório remoto foram aplicadas corretamente no repositório local. 3. Faça outras alterações no repositório remoto. 4. No seu repositório local, utilize o comando <code>git fetch</code> para obter as atualizações do repositório remoto sem mesclar automaticamente. Por exemplo:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> fetch origin
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Verifique que as alterações não foram aplicadas automaticamente no repositório local. 5. Para mesclar manualmente as alterações, use o comando <code>git merge</code>. Por exemplo:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> merge origin/main
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Verifique se as alterações feitas no repositório remoto foram aplicadas corretamente no repositório local.</p><p>Ao concluir este desafio, o estagiário terá utilizado os comandos <code>git pull</code> e <code>git fetch</code> para obter e mesclar alterações do repositório remoto no local.</p><h2 id="desafio-8-colaboracao-com-outros-desenvolvedores" tabindex="-1"><a class="header-anchor" href="#desafio-8-colaboracao-com-outros-desenvolvedores" aria-hidden="true">#</a> Desafio 8: Colaboração com outros desenvolvedores</h2><p><strong>Objetivo</strong>: Simular a colaboração com outros desenvolvedores, realizando pull requests e revisões de código.</p><h3 id="topicos-a-serem-estudados-7" tabindex="-1"><a class="header-anchor" href="#topicos-a-serem-estudados-7" aria-hidden="true">#</a> Tópicos a serem estudados:</h3><ol><li>Forks: Aprenda a criar um fork de um repositório para colaborar com projetos de outros desenvolvedores.</li><li>Pull requests: Entenda como criar pull requests para propor mudanças em um projeto e como colaborar com outros desenvolvedores no processo de revisão e aprovação de código.</li><li>Revisões de código: Aprenda a realizar revisões de código e a sugerir mudanças antes de aceitar um pull request.</li></ol><h3 id="atividades-propostas-7" tabindex="-1"><a class="header-anchor" href="#atividades-propostas-7" aria-hidden="true">#</a> Atividades propostas:</h3><ol><li>Encontre um projeto público no GitHub, GitLab ou Bitbucket e faça um fork deste repositório para a sua conta pessoal.</li><li>No seu repositório forked, crie uma nova branch e faça algumas alterações no código. Faça commit e push das suas alterações para o repositório remoto.</li><li>Crie um pull request para propor suas alterações no projeto original. Preencha as informações necessárias, como título e descrição das mudanças.</li><li>Peça a um colega ou líder técnico para revisar o seu pull request. Eles devem fazer comentários e sugerir melhorias, se necessário.</li><li>Faça as mudanças sugeridas e atualize o pull request. Certifique-se de que as alterações atendem às expectativas do revisor.</li><li>Quando o revisor aprovar suas mudanças, faça o merge do pull request no projeto original (se você tiver permissão) ou peça ao mantenedor do projeto para fazê-lo.</li></ol><p>Ao concluir este desafio, o estagiário terá experimentado a colaboração com outros desenvolvedores por meio de pull requests e revisões de código, um processo comum no desenvolvimento de software.</p>`,99);function p(h,v){const o=s("ExternalLinkIcon");return r(),d("div",null,[c,e("p",null,[e("a",u,[n("Curso de Git e GitHub"),t(o)])]),m])}const b=i(l,[["render",p],["__file","index.html.vue"]]);export{b as default};
