import{_ as r,M as t,p as d,q as l,R as e,t as a,N as s,a1 as i}from"./framework-5866ffd3.js";const c={},n=i('<h1 id="programacao-orientada-a-objetos-poo" tabindex="-1"><a class="header-anchor" href="#programacao-orientada-a-objetos-poo" aria-hidden="true">#</a> Programação Orientada a Objetos (POO)</h1><p>Neste módulo, os estagiários aprenderão os conceitos fundamentais da Programação Orientada a Objetos (POO) e como aplicá-los em PHP.</p><h2 id="aulas" tabindex="-1"><a class="header-anchor" href="#aulas" aria-hidden="true">#</a> Aulas</h2><h3 id="aula-curso-em-video-poo" tabindex="-1"><a class="header-anchor" href="#aula-curso-em-video-poo" aria-hidden="true">#</a> Aula Curso em Vídeo - POO</h3>',4),p={href:"https://www.youtube.com/playlist?list=PLHz_AreHm4dmGuLII3tsvryMMD7VgcT7x",target:"_blank",rel:"noopener noreferrer"},u=e("h3",{id:"aula-rodrigo-oliveira",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#aula-rodrigo-oliveira","aria-hidden":"true"},"#"),a(" Aula Rodrigo Oliveira")],-1),m={href:"https://www.youtube.com/playlist?list=PLwXQLZ3FdTVEau55kNj_zLgpXL4JZUg8I",target:"_blank",rel:"noopener noreferrer"},h=i('<h1 id="desafios" tabindex="-1"><a class="header-anchor" href="#desafios" aria-hidden="true">#</a> Desafios</h1><h2 id="desafio-1-introducao-a-poo" tabindex="-1"><a class="header-anchor" href="#desafio-1-introducao-a-poo" aria-hidden="true">#</a> Desafio 1: Introdução à POO</h2><p><strong>Objetivo</strong>: Entenda os conceitos básicos da Programação Orientada a Objetos, como classes, objetos, métodos e atributos.</p><h3 id="topicos-a-serem-estudados" tabindex="-1"><a class="header-anchor" href="#topicos-a-serem-estudados" aria-hidden="true">#</a> Tópicos a serem estudados:</h3><ol><li>Conceitos fundamentais de POO</li><li>Classes e objetos</li><li>Métodos e atributos</li><li>Instanciando objetos e acessando seus métodos e atributos</li></ol><h3 id="atividades-propostas" tabindex="-1"><a class="header-anchor" href="#atividades-propostas" aria-hidden="true">#</a> Atividades propostas:</h3><ol><li>Estude os conceitos básicos de Programação Orientada a Objetos, incluindo a importância e os benefícios desta abordagem.</li><li>Aprenda a criar classes e objetos em sua linguagem de programação preferida (por exemplo, JavaScript, Python, Java ou PHP).</li><li>Entenda o que são métodos e atributos e como eles são usados em classes e objetos.</li><li>Desenvolva um projeto simples que envolva a criação de uma classe, a instanciação de objetos e a interação com seus métodos e atributos.</li></ol><p>Ao concluir este desafio, o estagiário será capaz de aplicar os conceitos básicos de Programação Orientada a Objetos em seus projetos de desenvolvimento de software.</p><h2 id="desafio-2-classes-e-objetos-em-php" tabindex="-1"><a class="header-anchor" href="#desafio-2-classes-e-objetos-em-php" aria-hidden="true">#</a> Desafio 2: Classes e objetos em PHP</h2><p><strong>Objetivo</strong>: Aprenda a criar classes e objetos em PHP e a trabalhar com métodos e atributos.</p><h3 id="topicos-a-serem-estudados-1" tabindex="-1"><a class="header-anchor" href="#topicos-a-serem-estudados-1" aria-hidden="true">#</a> Tópicos a serem estudados:</h3><ol><li>Criando classes em PHP</li><li>Definindo atributos e métodos</li><li>Instanciando objetos</li><li>Acessando e modificando atributos</li><li>Chamando métodos</li></ol><h3 id="atividades-propostas-1" tabindex="-1"><a class="header-anchor" href="#atividades-propostas-1" aria-hidden="true">#</a> Atividades propostas:</h3><ol><li>Estude como criar classes em PHP, incluindo a sintaxe e a estrutura básica.</li><li>Aprenda a definir atributos e métodos dentro de uma classe em PHP.</li><li>Pratique a instanciação de objetos a partir de uma classe em PHP.</li><li>Aprenda a acessar e modificar os atributos de um objeto em PHP.</li><li>Pratique a chamada de métodos de um objeto em PHP.</li></ol><h3 id="exemplo" tabindex="-1"><a class="header-anchor" href="#exemplo" aria-hidden="true">#</a> Exemplo:</h3><p>Crie uma classe chamada <code>Carro</code> com os seguintes atributos e métodos:</p><ul><li><p>Atributos:</p><ul><li>marca (string)</li><li>modelo (string)</li><li>ano (integer)</li></ul></li><li><p>Métodos:</p><ul><li>ligar(): Imprime &quot;O carro está ligado.&quot;</li><li>desligar(): Imprime &quot;O carro está desligado.&quot;</li></ul></li></ul><p>Instancie um objeto da classe <code>Carro</code>, atribua valores aos seus atributos e chame os métodos ligar() e desligar().</p><p>Ao concluir este desafio, o estagiário será capaz de criar e manipular classes e objetos em PHP, bem como trabalhar com métodos e atributos.</p><h2 id="desafio-3-heranca-e-polimorfismo" tabindex="-1"><a class="header-anchor" href="#desafio-3-heranca-e-polimorfismo" aria-hidden="true">#</a> Desafio 3: Herança e polimorfismo</h2><p><strong>Objetivo</strong>: Explore os conceitos de herança e polimorfismo em PHP, aprendendo a estender classes e a sobrescrever ou modificar métodos.</p><h3 id="topicos-a-serem-estudados-2" tabindex="-1"><a class="header-anchor" href="#topicos-a-serem-estudados-2" aria-hidden="true">#</a> Tópicos a serem estudados:</h3><ol><li>Herança em PHP</li><li>Polimorfismo em PHP</li><li>Estendendo classes</li><li>Sobrescrevendo e modificando métodos</li></ol><h3 id="atividades-propostas-2" tabindex="-1"><a class="header-anchor" href="#atividades-propostas-2" aria-hidden="true">#</a> Atividades propostas:</h3><ol><li>Estude o conceito de herança em PHP e como estender uma classe.</li><li>Aprenda sobre polimorfismo em PHP e como sobrescrever ou modificar métodos em classes filhas.</li><li>Crie uma classe base e estenda-a com uma ou mais classes filhas.</li><li>Pratique a sobrescrita e a modificação de métodos nas classes filhas.</li></ol><h3 id="exemplo-1" tabindex="-1"><a class="header-anchor" href="#exemplo-1" aria-hidden="true">#</a> Exemplo:</h3><p>Crie uma classe chamada <code>Veiculo</code> com os seguintes atributos e métodos:</p><ul><li><p>Atributos:</p><ul><li>marca (string)</li><li>modelo (string)</li><li>ano (integer)</li></ul></li><li><p>Métodos:</p><ul><li>ligar(): Imprime &quot;O veículo está ligado.&quot;</li><li>desligar(): Imprime &quot;O veículo está desligado.&quot;</li></ul></li></ul><p>Em seguida, crie uma classe <code>Carro</code> que estenda a classe <code>Veiculo</code>. Adicione um novo atributo chamado <code>portas</code> (integer) e sobrescreva os métodos ligar() e desligar() para imprimir &quot;O carro está ligado.&quot; e &quot;O carro está desligado.&quot;, respectivamente.</p><p>Instancie um objeto da classe <code>Carro</code>, atribua valores aos seus atributos e chame os métodos ligar() e desligar().</p><p>Ao concluir este desafio, o estagiário será capaz de aplicar os conceitos de herança e polimorfismo em PHP, estender classes e sobrescrever ou modificar métodos.</p><h2 id="desafio-4-encapsulamento-e-modificadores-de-acesso" tabindex="-1"><a class="header-anchor" href="#desafio-4-encapsulamento-e-modificadores-de-acesso" aria-hidden="true">#</a> Desafio 4: Encapsulamento e modificadores de acesso</h2><p><strong>Objetivo</strong>: Aprenda sobre encapsulamento e a importância de controlar o acesso a atributos e métodos por meio de modificadores de acesso.</p><h3 id="topicos-a-serem-estudados-3" tabindex="-1"><a class="header-anchor" href="#topicos-a-serem-estudados-3" aria-hidden="true">#</a> Tópicos a serem estudados:</h3><ol><li>Encapsulamento</li><li>Modificadores de acesso: public, private e protected</li><li>Getters e setters</li><li>Boas práticas de encapsulamento</li></ol><h3 id="atividades-propostas-3" tabindex="-1"><a class="header-anchor" href="#atividades-propostas-3" aria-hidden="true">#</a> Atividades propostas:</h3><ol><li>Estude o conceito de encapsulamento e a importância de controlar o acesso aos atributos e métodos de uma classe.</li><li>Aprenda sobre os modificadores de acesso public, private e protected em PHP.</li><li>Crie uma classe com atributos e métodos que utilizem diferentes modificadores de acesso.</li><li>Implemente getters e setters para controlar o acesso e a manipulação dos atributos da classe.</li></ol><h3 id="exemplo-2" tabindex="-1"><a class="header-anchor" href="#exemplo-2" aria-hidden="true">#</a> Exemplo:</h3><p>Crie uma classe chamada <code>ContaBancaria</code> com os seguintes atributos e métodos:</p><ul><li><p>Atributos:</p><ul><li>titular (string) - acesso public</li><li>saldo (float) - acesso private</li></ul></li><li><p>Métodos:</p><ul><li>depositar(float $valor): Adiciona o valor ao saldo - acesso public</li><li>sacar(float $valor): Subtrai o valor do saldo - acesso public</li><li>getSaldo(): Retorna o saldo - acesso public</li><li>setSaldo(float $saldo): Define o saldo - acesso private</li></ul></li></ul><p>Implemente os getters e setters para os atributos, garantindo que os valores atribuídos sejam válidos e o acesso seja controlado.</p><p>Instancie um objeto da classe <code>ContaBancaria</code>, atribua valores aos seus atributos e chame os métodos depositar(), sacar() e getSaldo().</p><p>Ao concluir este desafio, o estagiário será capaz de aplicar os conceitos de encapsulamento e modificadores de acesso em PHP e controlar o acesso a atributos e métodos de uma classe.</p><h2 id="desafio-5-interfaces-e-classes-abstratas" tabindex="-1"><a class="header-anchor" href="#desafio-5-interfaces-e-classes-abstratas" aria-hidden="true">#</a> Desafio 5: Interfaces e classes abstratas</h2><p><strong>Objetivo</strong>: Entenda as diferenças entre interfaces e classes abstratas e como usá-las para estruturar e organizar o código.</p><h3 id="topicos-a-serem-estudados-4" tabindex="-1"><a class="header-anchor" href="#topicos-a-serem-estudados-4" aria-hidden="true">#</a> Tópicos a serem estudados:</h3><ol><li>Interfaces</li><li>Classes abstratas</li><li>Diferenças entre interfaces e classes abstratas</li><li>Implementação de interfaces e herança de classes abstratas</li></ol><h3 id="atividades-propostas-4" tabindex="-1"><a class="header-anchor" href="#atividades-propostas-4" aria-hidden="true">#</a> Atividades propostas:</h3><ol><li>Estude o conceito de interfaces e aprenda a criar e implementar interfaces em PHP.</li><li>Estude o conceito de classes abstratas e aprenda a criar e herdar classes abstratas em PHP.</li><li>Compare interfaces e classes abstratas, entendendo suas diferenças e casos de uso.</li><li>Crie uma interface e uma classe abstrata para representar entidades em um sistema de gerenciamento de produtos.</li></ol><h3 id="exemplo-3" tabindex="-1"><a class="header-anchor" href="#exemplo-3" aria-hidden="true">#</a> Exemplo:</h3><p>Crie uma interface chamada <code>ProdutoInterface</code> com os seguintes métodos:</p><ul><li>getPreco(): float</li><li>getDescricao(): string</li></ul><p>Crie uma classe abstrata chamada <code>ProdutoBase</code> que implementa a interface <code>ProdutoInterface</code> e inclui os atributos e métodos comuns aos produtos, como preço e descrição.</p><p>Crie duas classes concretas que herdam de <code>ProdutoBase</code>: <code>ProdutoFisico</code> e <code>ProdutoDigital</code>. Adicione atributos e métodos específicos para cada tipo de produto.</p><p>Instancie objetos das classes concretas e use os métodos da interface e da classe abstrata.</p><p>Ao concluir este desafio, o estagiário será capaz de entender a diferença entre interfaces e classes abstratas e aplicá-las para estruturar e organizar o código em PHP.</p><h2 id="desafio-6-projeto-pratico" tabindex="-1"><a class="header-anchor" href="#desafio-6-projeto-pratico" aria-hidden="true">#</a> Desafio 6: Projeto prático</h2><p><strong>Objetivo</strong>: Crie um projeto prático em PHP aplicando os conceitos de POO aprendidos neste módulo.</p><h3 id="topicos-a-serem-aplicados" tabindex="-1"><a class="header-anchor" href="#topicos-a-serem-aplicados" aria-hidden="true">#</a> Tópicos a serem aplicados:</h3><ol><li>Classes e objetos</li><li>Herança e polimorfismo</li><li>Encapsulamento e modificadores de acesso</li><li>Interfaces e classes abstratas</li></ol><h3 id="atividades-propostas-5" tabindex="-1"><a class="header-anchor" href="#atividades-propostas-5" aria-hidden="true">#</a> Atividades propostas:</h3><ol><li>Escolha um tema para seu projeto, como um sistema de gerenciamento de produtos, de tarefas, de usuários, etc.</li><li>Crie as classes e objetos necessários para representar as entidades e funcionalidades do sistema.</li><li>Aplique os conceitos de herança e polimorfismo para criar uma estrutura de classes eficiente e reutilizável.</li><li>Utilize encapsulamento e modificadores de acesso para controlar o acesso a atributos e métodos.</li><li>Implemente interfaces e/ou estenda classes abstratas para organizar e estruturar o código.</li></ol><h3 id="exemplo-4" tabindex="-1"><a class="header-anchor" href="#exemplo-4" aria-hidden="true">#</a> Exemplo:</h3><p>Crie um sistema de gerenciamento de produtos que possua as seguintes funcionalidades:</p><ul><li>Adicionar produtos (físicos e digitais) ao catálogo.</li><li>Remover produtos do catálogo.</li><li>Listar produtos do catálogo.</li><li>Calcular o valor total dos produtos do catálogo.</li></ul><p>Utilize classes, herança, interfaces, classes abstratas e encapsulamento para criar uma estrutura de código organizada e eficiente.</p><p>Ao concluir este desafio, o estagiário será capaz de aplicar os conceitos de POO em PHP em um projeto prático, demonstrando habilidades em desenvolvimento de software e organização de código.</p>',67);function b(f,g){const o=t("ExternalLinkIcon");return d(),l("div",null,[n,e("p",null,[e("a",p,[a("Curso de POO PHP (Programação Orientada a Objetos)"),s(o)])]),u,e("p",null,[e("a",m,[a("Curso de PHP Orientado a Objetos"),s(o)])]),h])}const v=r(c,[["render",b],["__file","index.html.vue"]]);export{v as default};
