import{_ as s,M as d,p as t,q as l,R as e,t as a,N as i,a1 as r}from"./framework-5866ffd3.js";const n={},c=r('<h1 id="laravel-parte-1-crud-de-cadastro-de-clientes-com-multiplos-enderecos" tabindex="-1"><a class="header-anchor" href="#laravel-parte-1-crud-de-cadastro-de-clientes-com-multiplos-enderecos" aria-hidden="true">#</a> Laravel - Parte 1 (CRUD de Cadastro de Clientes com múltiplos endereços)</h1><p>Neste módulo, os estagiários aprenderão os fundamentos do framework Laravel e começarão a trabalhar com um projeto CRUD.</p><h2 id="aulas" tabindex="-1"><a class="header-anchor" href="#aulas" aria-hidden="true">#</a> Aulas</h2><h3 id="aula-carlos-ferreira-especializa-ti" tabindex="-1"><a class="header-anchor" href="#aula-carlos-ferreira-especializa-ti" aria-hidden="true">#</a> Aula Carlos Ferreira - Especializa TI</h3>',4),p={href:"https://www.youtube.com/playlist?list=PLVSNL1PHDWvQ1N6fqhQ5HQzFtN-xrkjNU",target:"_blank",rel:"noopener noreferrer"},m=e("h2",{id:"documentacao-oficial",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#documentacao-oficial","aria-hidden":"true"},"#"),a(" Documentação Oficial")],-1),u={href:"https://laravel.com/",target:"_blank",rel:"noopener noreferrer"},h=r('<div class="custom-container warning"><p class="custom-container-title">DICA 1</p><p>A documentação oficial do Laravel é um dos melhores recursos para aprender a usar o framework. Ela é bem completa e bem escrita, e é atualizada constantemente.</p><p>Sempre leia a documentação oficial antes de procurar por tutoriais na internet. Pois lá você encontrará a informação mais atualizada e a mais completa.</p></div><div class="custom-container warning"><p class="custom-container-title">DICA 2</p><p>Se vai iniciar um projeto com Laravel, leia a documentação oficial do framework antes de começar a codificar. Assim você terá uma visão geral do framework e poderá planejar melhor o projeto.</p></div><h1 id="desafios" tabindex="-1"><a class="header-anchor" href="#desafios" aria-hidden="true">#</a> Desafios</h1><h2 id="desafio-1-introducao-ao-laravel" tabindex="-1"><a class="header-anchor" href="#desafio-1-introducao-ao-laravel" aria-hidden="true">#</a> Desafio 1: Introdução ao Laravel</h2><p><strong>Objetivo</strong>: Entenda o que é o Laravel, seus recursos e arquitetura, e como ele se encaixa no ecossistema PHP.</p><h3 id="topicos-a-serem-abordados" tabindex="-1"><a class="header-anchor" href="#topicos-a-serem-abordados" aria-hidden="true">#</a> Tópicos a serem abordados:</h3><ol><li>História e evolução do Laravel</li><li>Principais características e recursos</li><li>Arquitetura do Laravel</li><li>Componentes do Laravel</li><li>Benefícios e vantagens de usar o Laravel</li></ol><h3 id="atividades-propostas" tabindex="-1"><a class="header-anchor" href="#atividades-propostas" aria-hidden="true">#</a> Atividades propostas:</h3><ol><li><p>Pesquise sobre a história e evolução do Laravel, desde sua criação até a versão atual.</p></li><li><p>Identifique e explique as principais características e recursos do Laravel que o diferenciam de outros frameworks PHP.</p></li><li><p>Estude a arquitetura do Laravel, incluindo o padrão de projeto MVC (Model-View-Controller), o sistema de rotas, o Eloquent ORM, o Blade template engine, entre outros componentes.</p></li><li><p>Explore os componentes do Laravel, como Artisan, Tinker, Middleware, Service Container, e Event/Listener.</p></li><li><p>Avalie os benefícios e vantagens de usar o Laravel em projetos PHP, comparando com outras opções disponíveis no ecossistema PHP.</p></li></ol><p>Ao concluir este desafio, o estagiário terá adquirido conhecimentos fundamentais sobre o Laravel, suas características e arquitetura, e como ele se posiciona no ecossistema PHP. Esses conhecimentos são importantes para quem deseja trabalhar com o Laravel em projetos PHP.</p><h2 id="desafio-2-instalacao-e-configuracao" tabindex="-1"><a class="header-anchor" href="#desafio-2-instalacao-e-configuracao" aria-hidden="true">#</a> Desafio 2: Instalação e configuração</h2><p><strong>Objetivo</strong>: Aprenda a instalar e configurar o Laravel, incluindo a criação de um novo projeto e a configuração do ambiente de desenvolvimento.</p><h3 id="topicos-a-serem-abordados-1" tabindex="-1"><a class="header-anchor" href="#topicos-a-serem-abordados-1" aria-hidden="true">#</a> Tópicos a serem abordados:</h3><ol><li>Requisitos do sistema</li><li>Instalação do Laravel</li><li>Criação de um novo projeto Laravel</li><li>Configuração do ambiente de desenvolvimento</li><li>Configuração do banco de dados</li></ol><h3 id="atividades-propostas-1" tabindex="-1"><a class="header-anchor" href="#atividades-propostas-1" aria-hidden="true">#</a> Atividades propostas:</h3><ol><li><p>Verifique os requisitos do sistema para instalar o Laravel e certifique-se de que seu ambiente de desenvolvimento atenda a esses requisitos.</p></li><li><p>Instale o Laravel usando o instalador do Laravel ou o Composer. Estude as diferenças entre os dois métodos de instalação e escolha o que melhor se adapta às suas necessidades.</p></li><li><p>Crie um novo projeto Laravel usando o comando <code>laravel new</code> ou <code>composer create-project</code>, dependendo do método de instalação escolhido.</p></li><li><p>Configure o ambiente de desenvolvimento, incluindo a instalação e configuração do servidor web local (por exemplo, Laravel Valet, Laravel Homestead, XAMPP, WAMP, etc.) e a configuração do arquivo <code>.env</code>.</p></li><li><p>Configure o banco de dados para o seu projeto Laravel. Escolha um sistema de gerenciamento de banco de dados (MySQL, PostgreSQL, SQLite, etc.) e configure-o no arquivo <code>.env</code>. Verifique se o banco de dados está funcionando corretamente e se o Laravel pode se conectar a ele.</p></li></ol><p>Ao concluir este desafio, o estagiário terá adquirido conhecimentos sobre a instalação e configuração do Laravel, bem como a criação e configuração de um novo projeto e do ambiente de desenvolvimento. Essas habilidades são fundamentais para começar a trabalhar com o Laravel em projetos PHP.</p><h2 id="desafio-3-rotas-controladores-e-views" tabindex="-1"><a class="header-anchor" href="#desafio-3-rotas-controladores-e-views" aria-hidden="true">#</a> Desafio 3: Rotas, controladores e views</h2><p><strong>Objetivo</strong>: Explore o sistema de rotas do Laravel, aprenda a criar controladores e trabalhe com views para gerar páginas dinâmicas.</p><h3 id="topicos-a-serem-abordados-2" tabindex="-1"><a class="header-anchor" href="#topicos-a-serem-abordados-2" aria-hidden="true">#</a> Tópicos a serem abordados:</h3><ol><li>Sistema de rotas do Laravel</li><li>Criação de controladores</li><li>Trabalhando com views</li><li>Passagem de dados entre controladores e views</li><li>Blade, o sistema de templates do Laravel</li></ol><h3 id="atividades-propostas-2" tabindex="-1"><a class="header-anchor" href="#atividades-propostas-2" aria-hidden="true">#</a> Atividades propostas:</h3><ol><li><p>Familiarize-se com o sistema de rotas do Laravel. Crie rotas básicas para GET, POST, PUT e DELETE e aprenda a associá-las a métodos de controladores específicos.</p></li><li><p>Crie um controlador para gerenciar a lógica de negócios de uma parte específica do seu aplicativo. Use o comando <code>php artisan make:controller</code> para criar o controlador e adicione alguns métodos a ele.</p></li><li><p>Crie uma view para exibir os dados gerados pelo controlador. Utilize o Blade para criar o layout básico da página e adicione os dados dinâmicos.</p></li><li><p>Passe os dados do controlador para a view. Aprenda a usar a função <code>compact</code> ou o método <code>with</code> para passar os dados do controlador para a view.</p></li><li><p>Aprofunde-se no sistema de templates Blade. Aprenda a utilizar estruturas de controle, como loops e condicionais, e a incluir outros arquivos Blade para criar layouts reutilizáveis e componentes.</p></li></ol><p>Ao concluir este desafio, o estagiário terá adquirido conhecimentos sobre o sistema de rotas, controladores e views do Laravel, e como eles interagem para criar páginas dinâmicas em um aplicativo Laravel. Essas habilidades são fundamentais para desenvolver aplicativos web com Laravel.</p><h2 id="desafio-4-migrations-e-eloquent-orm" tabindex="-1"><a class="header-anchor" href="#desafio-4-migrations-e-eloquent-orm" aria-hidden="true">#</a> Desafio 4: Migrations e Eloquent ORM</h2><p><strong>Objetivo</strong>: Aprenda a usar migrations para gerenciar o esquema do banco de dados e a utilizar o Eloquent ORM para interagir com os dados.</p><h3 id="topicos-a-serem-abordados-3" tabindex="-1"><a class="header-anchor" href="#topicos-a-serem-abordados-3" aria-hidden="true">#</a> Tópicos a serem abordados:</h3><ol><li>Migrations no Laravel</li><li>Criação e reversão de migrations</li><li>Eloquent ORM</li><li>Modelos Eloquent</li><li>Relacionamentos entre modelos</li></ol><h3 id="atividades-propostas-3" tabindex="-1"><a class="header-anchor" href="#atividades-propostas-3" aria-hidden="true">#</a> Atividades propostas:</h3><ol><li><p>Crie uma migration para uma tabela em seu projeto Laravel. Utilize o comando <code>php artisan make:migration</code> para criar a migration e edite o arquivo gerado para definir o esquema da tabela.</p></li><li><p>Aplique a migration usando o comando <code>php artisan migrate</code>. Verifique se a tabela foi criada corretamente no banco de dados.</p></li><li><p>Reverta a migration usando o comando <code>php artisan migrate:rollback</code>. Verifique se a tabela foi removida do banco de dados.</p></li><li><p>Crie um modelo Eloquent para representar uma entidade do seu projeto. Utilize o comando <code>php artisan make:model</code> para criar o modelo e defina os atributos e métodos necessários.</p></li><li><p>Utilize o Eloquent ORM para interagir com os dados do banco de dados. Insira, atualize e recupere registros usando o modelo Eloquent criado.</p></li><li><p>Crie relacionamentos entre modelos Eloquent. Aprenda a definir relacionamentos como &quot;um para um&quot;, &quot;um para muitos&quot;, &quot;muitos para muitos&quot; e &quot;polimórficos&quot;.</p></li></ol><p>Ao concluir este desafio, o estagiário terá adquirido conhecimentos sobre migrations e Eloquent ORM no Laravel. Essas habilidades são essenciais para gerenciar o esquema do banco de dados e interagir com os dados em um aplicativo Laravel.</p><h2 id="desafio-5-projeto-pratico-parte-1" tabindex="-1"><a class="header-anchor" href="#desafio-5-projeto-pratico-parte-1" aria-hidden="true">#</a> Desafio 5: Projeto prático - Parte 1</h2><p><strong>Objetivo</strong>: Inicie o desenvolvimento de um projeto CRUD no Laravel. Crie o esquema do banco de dados, as rotas, controladores e views para listar e adicionar clientes.</p><h3 id="topicos-a-serem-abordados-4" tabindex="-1"><a class="header-anchor" href="#topicos-a-serem-abordados-4" aria-hidden="true">#</a> Tópicos a serem abordados:</h3><ol><li>Planejamento do projeto</li><li>Migrations e Eloquent ORM</li><li>Rotas e controladores</li><li>Views e templates Blade</li><li>Formulários e validação</li></ol><h3 id="atividades-propostas-4" tabindex="-1"><a class="header-anchor" href="#atividades-propostas-4" aria-hidden="true">#</a> Atividades propostas:</h3><ol><li><p>Planeje um projeto CRUD simples no Laravel. Identifique as entidades, atributos e relacionamentos necessários. Neste exemplo, você trabalhará com a entidade Cliente.</p></li><li><p>Crie uma migration para a tabela <code>clientes</code> em seu projeto Laravel. Utilize o comando <code>php artisan make:migration</code> para criar a migration e defina o esquema da tabela.</p></li><li><p>Aplique a migration usando o comando <code>php artisan migrate</code>. Verifique se a tabela foi criada corretamente no banco de dados.</p></li><li><p>Crie um modelo Eloquent <code>Cliente</code> para representar a entidade Cliente. Utilize o comando <code>php artisan make:model</code> para criar o modelo e defina os atributos e métodos necessários.</p></li><li><p>Crie rotas e controladores para listar e adicionar clientes. Utilize o comando <code>php artisan make:controller</code> para criar um controlador e implemente os métodos necessários.</p></li><li><p>Crie views e templates Blade para exibir a lista de clientes e o formulário de adição de clientes. Utilize o sistema de templates do Blade para criar layouts reutilizáveis.</p></li><li><p>Implemente o formulário de adição de clientes e adicione validação de dados. Utilize as funcionalidades de validação do Laravel para garantir que os dados inseridos estejam de acordo com as regras definidas.</p></li></ol><p>Ao concluir esta parte do desafio, você terá iniciado o desenvolvimento de um projeto CRUD no Laravel e implementado a funcionalidade de listar e adicionar clientes. Isso irá ajudá-lo a aprimorar suas habilidades de desenvolvimento com o Laravel e a criar aplicativos web mais complexos.</p>',38);function v(f,b){const o=d("ExternalLinkIcon");return t(),l("div",null,[c,e("p",null,[e("a",p,[a("Curso Gratuito de Laravel 10.x"),i(o)])]),m,e("p",null,[e("a",u,[a("Documentação Oficial do Laravel"),i(o)])]),h])}const q=s(n,[["render",v],["__file","index.html.vue"]]);export{q as default};
